# -*- coding: utf-8 -*-
"""Helen T - Model Toxicity.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VfIW3p4kZk9TZNhmHCCMLuinzAKiPIBC

#(Ignore this) Downloads

Installation for the following:


*   Pytorch Geometric (this might take like 44 minutes to download btw)
*   Placeholder
"""

pip install rdkit

pip install datamol

"""# Don't run the cell below"""

!pip install --verbose --no-cache-dir torch-scatter
!pip install --verbose --no-cache-dir torch-sparse
!pip install --verbose --no-cache-dir torch-cluster
!pip install torch-geometric
!pip install tensorboardX
!wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
!unzip ngrok-stable-linux-amd64.zip

"""#Preprocessing"""

from google.colab import drive
drive.mount('/content/drive')

# Load/import libraries
import numpy as np
import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

from rdkit import Chem
from rdkit.Chem import PandasTools
import datamol as dm

# Converting the sdf file from SMILES to use as a df for Pandas

# Idk if this will work on your end because I copied the file path from my Google Drive
fn = '/content/drive/MyDrive/Helen Tran - Science Research 2024-2025/Data/tox21_10k_data_all.sdf'
tox_df = PandasTools.LoadSDF(fn, embedProps = True, molColName = None, smilesName = 'smiles')

# Using datamol + RDKit for molecular standardization for preprocessing

smiles_column = "smiles"


def _preprocess(row):
    mol = dm.to_mol(row[smiles_column], ordered=True)
    mol = dm.fix_mol(mol)
    mol = dm.sanitize_mol(mol, sanifix=True, charge_neutral=False)
    mol = dm.standardize_mol(
        mol,
        disconnect_metals=False,
        normalize=True,
        reionize=True,
        uncharge=False,
        stereo=True,
    )

    row["standard_smiles"] = dm.standardize_smiles(dm.to_smiles(mol))
    row["selfies"] = dm.to_selfies(mol)
    row["inchi"] = dm.to_inchi(mol)
    row["inchikey"] = dm.to_inchikey(mol)
    return row


data_clean = tox_df.apply(_preprocess, axis=1)
data_clean

smiles_column = "smiles"


def _preprocess(i, row):

    dm.disable_rdkit_log()

    mol = dm.to_mol(row[smiles_column], ordered=True)
    mol = dm.fix_mol(mol)
    mol = dm.sanitize_mol(mol, sanifix=True, charge_neutral=False)
    mol = dm.standardize_mol(
        mol, disconnect_metals=False, normalize=True, reionize=True, uncharge=False, stereo=True
    )

    row["standard_smiles"] = dm.standardize_smiles(dm.to_smiles(mol))
    row["selfies"] = dm.to_selfies(mol)
    row["inchi"] = dm.to_inchi(mol)
    row["inchikey"] = dm.to_inchikey(mol)
    return row


data_clean = dm.parallelized(_preprocess, tox_df.iterrows(), arg_type="args", progress=True, total=len(tox_df))
data_clean = pd.DataFrame(data_clean)
data_clean

print(tox_df)

#NaN = unknown data/no data
#0/1 = no interaction
#remove all rows/columns with NaNs

tox_df2 = tox_df[tox_df['NR-AR'].notna()]

# tox_df['NR-AR'] just gives the values in a specific column
# notna excludes all NaNs
# pd.merge (df1, df2) merges the dfs together
# pd.merge(df1,df2, on=‘Formula’) keeps the Formula column constant, but all the other columns are merged

"""# Logistic Regression Model (Baseline)"""



"""#Graph Neural Network"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import os

import torch_geometric.nn as pyg_nn
import torch_geometric.utils as pyg_utils

#utils = perform graph utilities

import time
from datetime import datetime

import networkx as nx
import numpy as np
import torch
import torch.optim as optim

#networks = visualizes the graphs

import torch_geometric.transforms as T

from tensorboardX import SummaryWriter
from sklearn.manifold import TSNE
import matplotlib.pyplot as plt

#more and more visualization tools
#tensorboard

#confused about where to start

#I understand that I need: def init, def forward, and I need to define what the layers are