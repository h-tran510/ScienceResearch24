# -*- coding: utf-8 -*-
"""Helen T - Model Toxicity.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VfIW3p4kZk9TZNhmHCCMLuinzAKiPIBC

#(Ignore this) Downloads

Installation for the following:


*   Pytorch Geometric (this might take like 44 minutes to download btw)
*   Placeholder
"""

!pip install --verbose --no-cache-dir torch-scatter
!pip install --verbose --no-cache-dir torch-sparse
!pip install --verbose --no-cache-dir torch-cluster
!pip install torch-geometric
!pip install tensorboardX
!wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
!unzip ngrok-stable-linux-amd64.zip

"""#Preprocessing"""

from google.colab import drive
drive.mount('/content/drive')

# Load/import libraries
import numpy as np
import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

from rdkit import Chem
from rdkit.Chem import PandasTools

# Using MolVS? or RDKit for molecular standardization for preprocessing

# break bonds

# neutralise

# rules

# tautomerism

# re-run neutralisation

# unsalt

# return standardized parent

# I kind of know the overall steps to standardizing molecules, but it's kind of unclear from all the resources I looked at so I'll ask about this during our session

# Converting the sdf file from SMILES to df for Pandas

# Idk if this will work on your end because I copied the file path from my Google Drive
fn = '/content/tox21_10k_data_all.sdf'
tox_df = PandasTools.LoadSDF(fn, embedProps = True, molColName = None, smilesName = 'smiles')

"""# Logistic Regression Model (Baseline)"""



"""#Graph Neural Network"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import os

import torch_geometric.nn as pyg_nn
import torch_geometric.utils as pyg_utils

#utils = perform graph utilities

import time
from datetime import datetime

import networkx as nx
import numpy as np
import torch
import torch.optim as optim

#networks = visualizes the graphs

import torch_geometric.transforms as T

from tensorboardX import SummaryWriter
from sklearn.manifold import TSNE
import matplotlib.pyplot as plt

#more and more visualization tools
#tensorboard

#confused about where to start

#I understand that I need: def init, def forward, and I need to define what the layers are